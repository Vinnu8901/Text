// Add detection 
function isPegaElement(el){
  return el.hasAttribute('data-test-id') || el.hasAttribute('data-ctl') || el.hasAttribute('data-click') ||
         el.hasAttribute('data-hotkey') || el.hasAttribute('data-validation') || el.hasAttribute('data-required') ||
         el.hasAttribute('data-template') || el.hasAttribute('string_type') || el.hasAttribute('reserve_space') ||
         el.hasAttribute('data-ui-meta') || el.hasAttribute('node_name') || el.hasAttribute('pyclassname') ||
         el.hasAttribute('pyworkpage');
}

function isSalesforceElement(el){
  const tag = el.tagName.toLowerCase();
  const cls = el.className||'';
  return el.hasAttribute('data-aura-class') || el.hasAttribute('data-aura-rendered-by') ||
         el.hasAttribute('data-key') || el.hasAttribute('data-id') || el.hasAttribute('data-qa-locator') ||
         tag.startsWith('lightning-') || tag.startsWith('force-') || cls.includes('slds-');
}



//Replace Sf gens
function genSalesforceXPath(el){
  const tag = el.tagName.toLowerCase();

  if(el.hasAttribute('data-qa-locator')) return `//*[@data-qa-locator="${el.getAttribute('data-qa-locator')}"]`;
  if(el.hasAttribute('data-aura-class')) return `//*[@data-aura-class="${el.getAttribute('data-aura-class')}"]`;
  if(el.hasAttribute('data-aura-rendered-by')) return `//*[@data-aura-rendered-by="${el.getAttribute('data-aura-rendered-by')}"]`;
  if(el.hasAttribute('data-key')) return `//*[@data-key="${el.getAttribute('data-key')}"]`;
  if(el.hasAttribute('data-id')) return `//*[@data-id="${el.getAttribute('data-id')}"]`;

  if(tag.startsWith('lightning-')) return `//${tag}`;
  if(tag.startsWith('force-')) return `//${tag}`;
  if((el.className||'').includes('slds-')) return `//*[contains(@class,"slds-")]`;

  return genBasicXPath(el);
}

function genSalesforceSmartXPath(el){
  const tag = el.tagName.toLowerCase();
  const a = getSmartAnchorText(el);
  if(!a) return '';
  const A = a.replace(/"/g,'\\"');

  if(el.hasAttribute('data-qa-locator')) return `//*[normalize-space()="${A}"]//following::*[@data-qa-locator="${el.getAttribute('data-qa-locator')}"][1]`;
  if(el.hasAttribute('data-aura-class')) return `//*[normalize-space()="${A}"]//following::*[@data-aura-class="${el.getAttribute('data-aura-class')}"][1]`;
  if(el.hasAttribute('data-aura-rendered-by')) return `//*[normalize-space()="${A}"]//following::*[@data-aura-rendered-by="${el.getAttribute('data-aura-rendered-by')}"][1]`;
  if(el.hasAttribute('data-key')) return `//*[normalize-space()="${A}"]//following::*[@data-key="${el.getAttribute('data-key')}"][1]`;
  if(el.hasAttribute('data-id')) return `//*[normalize-space()="${A}"]//following::*[@data-id="${el.getAttribute('data-id')}"][1]`;

  if(tag.startsWith('lightning-') || tag.startsWith('force-')) return `//*[normalize-space()="${A}"]//following::${tag}[1]`;
  if((el.className||'').includes('slds-')) return `//*[normalize-space()="${A}"]//following::*[contains(@class,"slds-")][1]`;

  return '';
}

//Replace pegjen
function genPegaXPath(el){
  const tag=el.tagName.toLowerCase();
  const attrs=['data-test-id','data-ctl','data-click','data-hotkey','data-validation','data-required','data-template',
               'string_type','reserve_space','data-ui-meta','node_name','pyclassname','pyworkpage'];
  for(const a of attrs){
    if(el.hasAttribute(a)) return `//*[@${a}="${el.getAttribute(a)}"]`;
  }
  if(el.getAttribute('role')==='button') return `//${tag}[@role="button"]`;
  return genBasicXPath(el);
}

function genPegaSmartXPath(el){
  const tag=el.tagName.toLowerCase();
  const a=getSmartAnchorText(el);
  if(!a) return '';
  const A=a.replace(/"/g,'\\"');

  const attrs=['data-test-id','data-ctl','data-click','data-hotkey','data-validation','data-required','data-template',
               'string_type','reserve_space','data-ui-meta','node_name','pyclassname','pyworkpage'];
  for(const attr of attrs){
    if(el.hasAttribute(attr)){
      return `//*[normalize-space()="${A}"]//following::*[@${attr}="${el.getAttribute(attr)}"][1]`;
    }
  }

  if(el.getAttribute('role')==='button'){
    return `//*[normalize-space()="${A}"]//following::${tag}[@role="button"][1]`;
  }
  return '';
}

//extralloca
CURRENT_LOCATORS = elements.map((el, idx)=>{
  const label = bestLabelFor(el) || textScore(el) || `elem${idx+1}`;
  return {
    id: `E${idx+1}`,
    tag: el.tagName.toLowerCase(),
    text: label,
    framework: isPegaElement(el) ? 'Pega+' : (isSalesforceElement(el) ? 'Salesforce+' : ''),
    xpaths: {
      basic: genBasicXPath(el),
      wildcards: genWildcardXPath(el),
      axes: genAxesXPath(el),
      functions: genFunctionXPath(el),
      sf: isSalesforceElement(el) ? genSalesforceXPath(el) : (isPegaElement(el) ? genPegaXPath(el) : ''),
      sfsmart: isSalesforceElement(el) ? genSalesforceSmartXPath(el) : (isPegaElement(el) ? genPegaSmartXPath(el) : '')
    },
    css: genCSS(el),
    playwright: genPlaywright(el)   // ðŸ‘ˆ add this
  };
});

//filolis

function fillLocatorList(panel='basic'){
  locList.innerHTML = '';
  if(!CURRENT_LOCATORS.length) return;

  CURRENT_LOCATORS.forEach(loc=>{
    let value = loc.xpaths[panel] || loc.xpaths.basic;
    if(panel === 'sf' && loc.xpaths.sfsmart) value = loc.xpaths.sfsmart || loc.xpaths.sf;

    const row = document.createElement('div');
    row.className = 'loc-row';
    row.innerHTML = `
      <div style="display:flex;align-items:center;gap:8px;min-width:0;flex:1">
        <span class="badge">${loc.framework||'Generic'}</span>
        <span style="white-space:nowrap;overflow:hidden;text-overflow:ellipsis;max-width:40ch">${loc.text}</span>
      </div>
      <div class="small mono" style="white-space:nowrap;overflow:hidden;text-overflow:ellipsis;max-width:58ch" title="${value}">${value}</div>
    `;
    row.addEventListener('click', async ()=>{
      try{ await navigator.clipboard.writeText(value); }catch(e){}
      showToast('Locator copied');
      tryHighlightInPreviewByXPathOrCss({ xpath: value, css: loc.css });
    });
    locList.appendChild(row);
  });
}

// plw

function genPlaywright(el){
  const tag = el.tagName.toLowerCase();
  const cls = el.className || '';
  const label = bestLabelFor(el);

  /* ---------- Salesforce strategies ---------- */
  if(el.hasAttribute('data-qa-locator')){
    return `page.locator('[data-qa-locator="${el.getAttribute('data-qa-locator')}"]')`;
  }
  if(el.hasAttribute('data-aura-class')){
    return `page.locator('[data-aura-class="${el.getAttribute('data-aura-class')}"]')`;
  }
  if(el.hasAttribute('data-aura-rendered-by')){
    return `page.locator('[data-aura-rendered-by="${el.getAttribute('data-aura-rendered-by')}"]')`;
  }
  if(el.hasAttribute('data-key')){
    return `page.locator('[data-key="${el.getAttribute('data-key')}"]')`;
  }
  if(el.hasAttribute('data-id')){
    return `page.locator('[data-id="${el.getAttribute('data-id')}"]')`;
  }
  if(tag.startsWith('lightning-') || tag.startsWith('force-')){
    return `page.locator('${tag}')`;
  }
  if(cls.includes('slds-')){
    return `page.locator('[class*="slds-"]')`;
  }

  /* ---------- Pega strategies ---------- */
  const pegaAttrs = [
    'data-test-id','data-ctl','data-click','data-hotkey','data-validation',
    'data-required','data-template','string_type','reserve_space','data-ui-meta',
    'node_name','pyclassname','pyworkpage'
  ];
  for(const a of pegaAttrs){
    if(el.hasAttribute(a)){
      return `page.locator('[${a}="${el.getAttribute(a)}"]')`;
    }
  }

  /* ---------- Generic roleable ---------- */
  if(tag==='a' && label) return `page.getByRole('link', { name: '${label}' })`;
  if(tag==='button' && label) return `page.getByRole('button', { name: '${label}' })`;
  if((tag==='input'||tag==='textarea'||tag==='select') && label){
    return `page.getByLabel('${label}')`;
  }

  /* ---------- Fallbacks ---------- */
  if(el.id) return `page.locator('#${el.id}')`;
  if(el.name) return `page.locator('${tag}[name="${el.name}"]')`;
  return `page.locator('${tag}')`;
}
















