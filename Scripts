<script>
/**
 * Adhyan Full Patch â€” Single-file replacement
 * - Drop-in replacement for the <script>... <\/script> area of Adhyan HTML.
 * - Implements: extraction, XPath generators (basic/wildcard/axes/functions),
 *   Salesforce/Pega specializers, bestXPath chooser, UI renderers, dynamic picker,
 *   robust highlight across frames & shadow DOM, action candidate finder,
 *   templateification, artifact (zip) generator for sample languages.
 *
 * Usage:
 *  - window.AdhyPatch.extractAllLocators()
 *  - window.AdhyPatch.fillLocatorList(panel)
 *  - window.AdhyPatch.openDynamicPicker(...)
 *  - window.AdhyPatch.tryHighlightByXPath(xpath)
 *  - window.AdhyPatch.buildArtifactsFiles(options) -> returns files map
 *
 * Note: This script is defensive and provides fallbacks for missing host helpers.
 */

(function AdhyanFullPatch(){
  // Namespace
  const NS = window.AdhyPatch = window.AdhyPatch || {};

  // -------------------- CONFIG --------------------
  NS.DEBUG = false;
  function dbg(...args){ if(NS.DEBUG) console.debug('[AdhyPatch]', ...args); }

  // -------------------- CORE HELPERS --------------------
  function xpathLiteral(s){
    s = String(s || '');
    if (s.indexOf('"') === -1) return `"${s}"`;
    if (s.indexOf("'") === -1) return `'${s}'`;
    const parts = s.split('"'), out = [];
    for (let i = 0; i < parts.length; i++){
      if (parts[i] !== '') out.push(`"${parts[i].replace(/\\/g,'\\\\')}"`);
      if (i < parts.length - 1) out.push(`'"'`);
    }
    return `concat(${out.join(',')})`;
  }

  function safeAttr(el, name){ try { return el.getAttribute ? el.getAttribute(name) : null; } catch(e){ return null; } }

  function getLabelFor(el){
    try { if (typeof window.bestLabelFor === 'function') return window.bestLabelFor(el); } catch(e){}
    const id = el && el.getAttribute ? el.getAttribute('id') : null;
    if (id) {
      try {
        const sel = `label[for="${id.replace(/([#.;,[\\]()>+~=:*"\\\\])/g,'\\\\$1')}"]`;
        const lab = (window.CURRENT_DOC || document).querySelector(sel);
        if (lab && lab.textContent) return lab.textContent.trim();
      } catch(e){}
    }
    const parentLabel = el && el.closest ? el.closest('label') : null;
    if (parentLabel && parentLabel.textContent) return parentLabel.textContent.trim();
    return null;
  }

  // -------------------- SKIP / DEDUPE --------------------
  function isHiddenByInlineStyle(el){
    const s = (safeAttr(el,'style')||'').toLowerCase();
    return /display\s*:\s*none|visibility\s*:\s*hidden|opacity\s*:\s*0|pointer-events\s*:\s*none/.test(s);
  }
  function hasUsefulLabel(el){
    if(!el) return false;
    if (safeAttr(el,'aria-label')) return true;
    if (safeAttr(el,'placeholder')) return true;
    if (safeAttr(el,'name')) return true;
    const id = el.id;
    if (id){
      try{
        const sel = `label[for="${id.replace(/([#.;,[\\]()>+~=:*"\\\\])/g,'\\\\$1')}"]`;
        if((window.CURRENT_DOC||document).querySelector(sel)) return true;
      }catch(e){}
    }
    const t = (el.textContent||'').trim();
    return t.length > 0;
  }
  function isSFNoise(el){
    const cls = el.className || '';
    if(/\bslds-assistive-text\b/.test(cls)) return true;
    if(/\bslds-hide\b/.test(cls)) return true;
    if(safeAttr(el,'role') === 'presentation') return true;
    return false;
  }
  function isPegaNoise(el){
    const ctl = safeAttr(el,'data-ctl') || '';
    if(ctl === 'Tooltip') return true;
    if(ctl === 'Icon' && !el.hasAttribute('role') && !el.onclick) return true;
    return false;
  }
  function shouldSkip(el){
    if(!el || el.nodeType !== 1) return true;
    const tag = el.tagName.toLowerCase();

    if(el.hasAttribute('hidden')) return true;
    if(safeAttr(el,'aria-hidden') === 'true') return true;
    if(isHiddenByInlineStyle(el)) return true;
    if(el.hasAttribute('disabled') || safeAttr(el,'aria-disabled') === 'true') return true;
    if(el.hasAttribute('readonly')) return true;
    if(tag === 'input' && (safeAttr(el,'type')||'').toLowerCase() === 'hidden') return true;

    if(tag === 'a' && (!el.hasAttribute('href') || safeAttr(el,'href') === '#')) return true;

    if(isSFNoise(el)) return true;
    if(isPegaNoise(el)) return true;

    if(!hasUsefulLabel(el)) return true;

    return false;
  }

  function getSmartAnchorTextSafe(el){
    try { if (typeof window.getSmartAnchorText === 'function') return window.getSmartAnchorText(el) || ''; } catch(e){}
    const l = getLabelFor(el);
    return l || (safeAttr(el,'aria-label') || '').trim();
  }

  // -------------------- COLLECTOR --------------------
  function collectCandidateElements(doc){
    doc = doc || document;
    const selectors = [
      'input:not([type="hidden"])','button','a','select','textarea',
      '[role="button"]','span[role="button"]',
      '[data-ctl]','[data-qa-locator]','[data-aura-class]','[data-aura-rendered-by]','[data-key]','[data-id]',
      'lightning-input','lightning-button','lightning-combobox','lightning-textarea',
      'lightning-record-edit-form','lightning-tab','lightning-input-field','lightning-formatted-text',
      'force-record-view','force-input','force-button','force-lookup','force-list-view'
    ];
    let basics = [];
    try { basics = Array.from(doc.querySelectorAll(selectors.join(','))); } catch(e){ basics = []; }
    let filtered = basics.filter(el => !shouldSkip(el));
    const seen = new Set();
    filtered = filtered.filter(el=>{
      const anchor = (typeof getSmartAnchorTextSafe === 'function') ? getSmartAnchorTextSafe(el) : '';
      const sig = [
        el.tagName.toLowerCase(),
        el.id||'',
        safeAttr(el,'name')||'',
        safeAttr(el,'data-qa-locator')||'',
        safeAttr(el,'data-ctl')||'',
        safeAttr(el,'data-key')||'',
        safeAttr(el,'data-id')||'',
        anchor
      ].join('|');
      if(seen.has(sig)) return false;
      seen.add(sig);
      return true;
    });
    return filtered;
  }

  // -------------------- GENERATORS: Basic / Wildcard / Axes / Function --------------------
  function genBasicXPath(el){
    if(!el) return '';
    const tag = el.tagName.toLowerCase();
    if (el.id) return `//*[@id=${xpathLiteral(el.id)}]`;
    const name = safeAttr(el,'name');
    if (name) return `//${tag}[@name=${xpathLiteral(name)}]`;
    const label = getLabelFor(el);
    if (label) return `//${tag}[contains(normalize-space(.), ${xpathLiteral(label.trim())})]`;
    const cls = (safeAttr(el,'class')||'').trim().split(/\s+/).filter(Boolean)[0];
    if (cls) return `//${tag}[contains(concat(' ', normalize-space(@class), ' '), ${xpathLiteral(' ' + cls + ' ')})]`;
    const parent = el.parentElement;
    if (!parent) return `//${tag}[1]`;
    const same = Array.from(parent.children).filter(x => x.tagName === el.tagName);
    const idx = same.indexOf(el) + 1;
    return `${genBasicXPath(parent)}/${tag}[${idx}]`;
  }

  function genWildcardXPath(el){
    if(!el) return '';
    if (el.id) return `//*[@id=${xpathLiteral(el.id)}]`;
    const name = safeAttr(el,'name');
    if (name) return `//*[@name=${xpathLiteral(name)}]`;
    const label = getLabelFor(el);
    if (label) return `//*[contains(normalize-space(.), ${xpathLiteral(label.trim())})]`;
    const cls = (safeAttr(el,'class')||'').trim().split(/\s+/).filter(Boolean)[0];
    if (cls) return `//*[contains(concat(' ', normalize-space(@class), ' '), ${xpathLiteral(' ' + cls + ' ')})]`;
    return genBasicXPath(el);
  }

  function genAxesXPath(el){
    if(!el) return '';
    const tag = el.tagName.toLowerCase();
    const id = safeAttr(el,'id');
    if (id) return `//label[@for=${xpathLiteral(id)}]/following::${tag}[1]`;
    const al = safeAttr(el,'aria-labelledby');
    if (al) return `//*[@id=${xpathLiteral(al.split(/\s+/)[0])}]/following::${tag}[1]`;
    const label = getLabelFor(el);
    if (label) return `//label[contains(normalize-space(.), ${xpathLiteral(label.trim())})]/following::${tag}[1]`;
    return `((//legend|//h1|//h2|//h3|//h4|//h5|//h6)[contains(normalize-space(.), ${xpathLiteral((label||'').trim())})]/following::${tag}[1]) | (${genBasicXPath(el)})`;
  }

  function genFunctionXPath(el){
    if(!el) return '';
    const tag = el.tagName.toLowerCase();
    const ph = safeAttr(el,'placeholder');
    if (ph && String(ph).trim()) return `//${tag}[contains(@placeholder, ${xpathLiteral(ph)})]`;
    const ti = safeAttr(el,'title');
    if (ti && String(ti).trim()) return `//${tag}[contains(@title, ${xpathLiteral(ti)})]`;
    const alt = safeAttr(el,'alt');
    if (alt && String(alt).trim()) return `//${tag}[contains(@alt, ${xpathLiteral(alt)})]`;
    return genBasicXPath(el);
  }

  // -------------------- Salesforce / LWC / Aura / Pega generators --------------------
  function genSalesforceXPath(el){
    if(!el) return '';
    const tag = el.tagName.toLowerCase();
    if (safeAttr(el,'data-qa-locator')) return `//${tag}[@data-qa-locator=${xpathLiteral(safeAttr(el,'data-qa-locator'))}]`;
    if (safeAttr(el,'data-key')) return `//${tag}[@data-key=${xpathLiteral(safeAttr(el,'data-key'))}]`;
    if (safeAttr(el,'title')) return `//${tag}[@title=${xpathLiteral(safeAttr(el,'title'))}]`;
    if (safeAttr(el,'data-aura-rendered-by')) return `//${tag}[@data-aura-rendered-by=${xpathLiteral(safeAttr(el,'data-aura-rendered-by'))}]`;
    return genBasicXPath(el);
  }

  function genSalesforceLWCXPath(el){
    if(!el) return '';
    const tag = el.tagName.toLowerCase();
    if (safeAttr(el,'data-id')) return `//${tag}[@data-id=${xpathLiteral(safeAttr(el,'data-id'))}]`;
    if (safeAttr(el,'data-field')) return `//${tag}[@data-field=${xpathLiteral(safeAttr(el,'data-field'))}]`;
    if (/^lightning-/.test(tag)){
      return `(//${tag}[@data-id or @data-field or @data-key or @title or @data-qa-locator])[1]` +
             `| ancestor-or-self::${tag}//input | ancestor-or-self::${tag}//button`;
    }
    return genSalesforceXPath(el);
  }

  function genSalesforceAuraXPath(el){
    if(!el) return '';
    const tag = el.tagName.toLowerCase();
    if (safeAttr(el,'data-aura-class')) return `//${tag}[@data-aura-class=${xpathLiteral(safeAttr(el,'data-aura-class'))}]`;
    if (safeAttr(el,'data-aura-rendered-by')) return `//${tag}[@data-aura-rendered-by=${xpathLiteral(safeAttr(el,'data-aura-rendered-by'))}]`;
    return genSalesforceXPath(el);
  }

  function genPegaXPath(el){
    if(!el) return '';
    const tag = el.tagName.toLowerCase();
    if (safeAttr(el,'data-test-id')) return `//${tag}[@data-test-id=${xpathLiteral(safeAttr(el,'data-test-id'))}]`;
    if (safeAttr(el,'data-node-id')) return `//${tag}[@data-node-id=${xpathLiteral(safeAttr(el,'data-node-id'))}]`;
    if (safeAttr(el,'data-ctl')) return `//${tag}[@data-ctl=${xpathLiteral(safeAttr(el,'data-ctl'))}]`;
    if (safeAttr(el,'role') === 'button') return `//${tag}[@role='button']`;
    return genBasicXPath(el);
  }

  // -------------------- CHOOSER: bestXPath --------------------
  function firstNonEmpty(){
    for (let i=0;i<arguments.length;i++){
      const v = arguments[i];
      if (typeof v === 'string' && v.trim()) return v;
    }
    return null;
  }

  function bestXPath(el){
    try {
      const lwc = genSalesforceLWCXPath(el);
      const aura = genSalesforceAuraXPath(el);
      const sfg = genSalesforceXPath(el);
      const pega = genPegaXPath(el);
      const axes = genAxesXPath(el);
      const fnc  = genFunctionXPath(el);
      const wild = genWildcardXPath(el);
      const basic= genBasicXPath(el);
      return firstNonEmpty(lwc, aura, sfg, pega, axes, fnc, wild, basic);
    } catch(e){
      return genBasicXPath(el);
    }
  }

  // -------------------- HIGHIGHTING (shadow roots & frames) --------------------
  function evaluateXPathInRoot(xpath, rootNode){
    try {
      const doc = (rootNode && rootNode.ownerDocument) ? rootNode.ownerDocument : (rootNode && rootNode.nodeType ? rootNode : document);
      const res = doc.evaluate(xpath, rootNode, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
      return res && res.singleNodeValue ? res.singleNodeValue : null;
    } catch (e) {
      return null;
    }
  }

  function findInShadowRoots(xpath, startRoot){
    startRoot = startRoot || document;
    const walker = (root)=>{
      try {
        const found = evaluateXPathInRoot(xpath, root);
        if(found) return found;
      } catch(e){ }
      const nodes = (root.querySelectorAll) ? root.querySelectorAll('*') : [];
      for (let i = 0; i < nodes.length; i++){
        const n = nodes[i];
        if (n.shadowRoot){
          const f = findInShadowRoots(xpath, n.shadowRoot);
          if (f) return f;
        }
      }
      return null;
    };
    return walker(startRoot);
  }

  function findInIframes(xpath, win){
    win = win || window;
    try {
      const found = evaluateXPathInRoot(xpath, win.document);
      if (found) return {el: found, win: win};

      const sf = findInShadowRoots(xpath, win.document);
      if (sf) return {el: sf, win: win};

      const frames = win.document.querySelectorAll ? win.document.querySelectorAll('iframe, frame') : [];
      for (let i = 0; i < frames.length; i++){
        const fr = frames[i];
        try {
          const cw = fr.contentWindow;
          if (!cw) continue;
          const inner = findInIframes(xpath, cw);
          if (inner && inner.el) return inner;
        } catch (e){
          continue;
        }
      }
    } catch (e){}
    return null;
  }

  function transientHighlightElement(el, options){
    if(!el || !el.style) return;
    options = options || {};
    const color = options.color || 'rgba(255,165,0,0.55)';
    const outlineColor = options.outline || 'rgba(255,165,0,0.95)';
    const orig = {
      boxShadow: el.style.boxShadow || '',
      outline: el.style.outline || '',
      zIndex: el.style.zIndex || '',
      transition: el.style.transition || ''
    };
    try { el.style.transition = 'box-shadow 0.15s ease'; } catch(e){}
    try { el.style.boxShadow = `0 0 0 4px ${color}, inset 0 0 0 1px #fff`; } catch(e){}
    try { el.style.outline = `2px solid ${outlineColor}`; } catch(e){}
    try { el.style.zIndex = '2147483647'; } catch(e){}
    try { el.scrollIntoView({behavior:'auto', block:'center', inline:'center'}); } catch(e){}
    const timeout = (options.duration || 3500);
    setTimeout(() => {
      try { el.style.boxShadow = orig.boxShadow; } catch(e){}
      try { el.style.outline = orig.outline; } catch(e){}
      try { el.style.zIndex = orig.zIndex; } catch(e){}
      try { el.style.transition = orig.transition; } catch(e){}
    }, timeout);
  }

  NS.tryHighlightByXPath = function(xpath){
    if(!xpath || typeof xpath !== 'string'){ dbg('tryHighlightByXPath needs xpath'); return false; }

    try {
      const direct = evaluateXPathInRoot(xpath, document);
      if (direct){
        transientHighlightElement(direct);
        dbg('Highlighted in main document:', direct);
        return true;
      }
    } catch(e){}

    try {
      const sf = findInShadowRoots(xpath, document);
      if (sf){
        transientHighlightElement(sf);
        dbg('Highlighted inside shadowRoot:', sf);
        return true;
      }
    } catch(e){}


----------_!$+$/$?$!$)$9#;#;)#9#;$!





/**
 * Find a human label/text for a form element.
 * - defers to global bestLabelFor(el) if present
 * - uses <label for="id"> if present
 * - uses enclosing <label> ancestor if present
 * - fallback: aria-label or title (optional)
 *
 * @param {Element} el - target element (input/select/textarea, etc)
 * @param {Document} [doc=document] - optional document/context (useful for tests or if you provide window.CURRENT_DOC)
 * @returns {string|null} trimmed label text or null
 */
function getLabelFor(el, doc = (window.CURRENT_DOC || document)) {
  if (!el || typeof el !== 'object') return null;

  // If a custom global helper exists, use it (but don't let errors bubble silently)
  if (typeof bestLabelFor === 'function') {
    try {
      const best = bestLabelFor(el);
      if (best != null) return String(best).trim();
    } catch (err) {
      // log but continue â€” don't silently swallow
      // console.warn('bestLabelFor threw', err);
    }
  }

  // Prefer explicit id -> label[for="id"]
  const id = el.getAttribute && el.getAttribute('id');
  if (id) {
    // Escape CSS-special chars for querySelector
    // simple helper: prefix any char that is not [A-Za-z0-9_-] with backslash
    const escId = id.replace(/([^\w-])/g, '\\$1');
    const sel = `label[for="${escId}"]`;
    const lab = doc.querySelector(sel);
    if (lab && lab.textContent) return lab.textContent.trim();
  }

  // If element is wrapped inside a <label> (e.g. <label>Text <input/></label>)
  const parentLabel = el.closest ? el.closest('label') : null;
  if (parentLabel && parentLabel.textContent) return parentLabel.textContent.trim();

  // Optional fallbacks: aria-label or title attributes
  if (el.getAttribute) {
    const aria = el.getAttribute('aria-label');
    if (aria) return aria.trim();
    const title = el.getAttribute('title');
    if (title) return title.trim();
  }

  return null;
}


$$$$$$$$$$$$$_$$$$&&-++((('_*_&+


function extractAllLocators(){
  if(!CURRENT_DOC){ 
    CURRENT_LOCATORS = [];
    return; 
  }

  const doc = CURRENT_DOC;
  const els = Array.from(doc.querySelectorAll(
    'input, button, a, select, textarea, [role="button"]'
  ));

  CURRENT_LOCATORS = els.map((el,i)=>{
    const tag  = el.tagName.toLowerCase();
    const id   = el.id || '';
    const name = el.getAttribute('name') || '';
    const type = el.getAttribute('type') || '';
    const role = el.getAttribute('role') || '';
    const label = (el.getAttribute('aria-label') || el.getAttribute('placeholder') || el.textContent || '').trim() || `elem${i+1}`;

    let xp = `//${tag}`; // fallback

    // ===== Enhanced XPath with operators =====
    if(id){
      // Exact match OR contains (covers dynamic IDs)
      xp = `//*[@id="${id}" or contains(@id,"${id}")]`;
    } 
    else if(name){
      // Exact match OR starts-with (covers partial names)
      const shortName = name.length > 3 ? name.slice(0,3) : name;
      xp = `//${tag}[@name="${name}" or starts-with(@name,"${shortName}")]`;
    } 
    else if(label){
      // Match text OR aria-label
      if(el.hasAttribute('aria-label')){
        const aria = el.getAttribute('aria-label');
        xp = `//${tag}[contains(normalize-space(.),"${label}") or contains(@aria-label,"${aria}")]`;
      } else {
        xp = `//${tag}[contains(normalize-space(.),"${label}")]`;
      }
    }

    return { tag, id, name, type, role, label, xpath: xp };
  });
}




// Add detection 
function isPegaElement(el){
  return el.hasAttribute('data-test-id') || el.hasAttribute('data-ctl') || el.hasAttribute('data-click') ||
         el.hasAttribute('data-hotkey') || el.hasAttribute('data-validation') || el.hasAttribute('data-required') ||
         el.hasAttribute('data-template') || el.hasAttribute('string_type') || el.hasAttribute('reserve_space') ||
         el.hasAttribute('data-ui-meta') || el.hasAttribute('node_name') || el.hasAttribute('pyclassname') ||
         el.hasAttribute('pyworkpage');
}

function isSalesforceElement(el){
  const tag = el.tagName.toLowerCase();
  const cls = el.className||'';
  return el.hasAttribute('data-aura-class') || el.hasAttribute('data-aura-rendered-by') ||
         el.hasAttribute('data-key') || el.hasAttribute('data-id') || el.hasAttribute('data-qa-locator') ||
         tag.startsWith('lightning-') || tag.startsWith('force-') || cls.includes('slds-');
}



//Replace Sf gens
function genSalesforceXPath(el){
  const tag = el.tagName.toLowerCase();

  if(el.hasAttribute('data-qa-locator')) return `//*[@data-qa-locator="${el.getAttribute('data-qa-locator')}"]`;
  if(el.hasAttribute('data-aura-class')) return `//*[@data-aura-class="${el.getAttribute('data-aura-class')}"]`;
  if(el.hasAttribute('data-aura-rendered-by')) return `//*[@data-aura-rendered-by="${el.getAttribute('data-aura-rendered-by')}"]`;
  if(el.hasAttribute('data-key')) return `//*[@data-key="${el.getAttribute('data-key')}"]`;
  if(el.hasAttribute('data-id')) return `//*[@data-id="${el.getAttribute('data-id')}"]`;

  if(tag.startsWith('lightning-')) return `//${tag}`;
  if(tag.startsWith('force-')) return `//${tag}`;
  if((el.className||'').includes('slds-')) return `//*[contains(@class,"slds-")]`;

  return genBasicXPath(el);
}

function genSalesforceSmartXPath(el){
  const tag = el.tagName.toLowerCase();
  const a = getSmartAnchorText(el);
  if(!a) return '';
  const A = a.replace(/"/g,'\\"');

  if(el.hasAttribute('data-qa-locator')) return `//*[normalize-space()="${A}"]//following::*[@data-qa-locator="${el.getAttribute('data-qa-locator')}"][1]`;
  if(el.hasAttribute('data-aura-class')) return `//*[normalize-space()="${A}"]//following::*[@data-aura-class="${el.getAttribute('data-aura-class')}"][1]`;
  if(el.hasAttribute('data-aura-rendered-by')) return `//*[normalize-space()="${A}"]//following::*[@data-aura-rendered-by="${el.getAttribute('data-aura-rendered-by')}"][1]`;
  if(el.hasAttribute('data-key')) return `//*[normalize-space()="${A}"]//following::*[@data-key="${el.getAttribute('data-key')}"][1]`;
  if(el.hasAttribute('data-id')) return `//*[normalize-space()="${A}"]//following::*[@data-id="${el.getAttribute('data-id')}"][1]`;

  if(tag.startsWith('lightning-') || tag.startsWith('force-')) return `//*[normalize-space()="${A}"]//following::${tag}[1]`;
  if((el.className||'').includes('slds-')) return `//*[normalize-space()="${A}"]//following::*[contains(@class,"slds-")][1]`;

  return '';
}

//Replace pegjen
function genPegaXPath(el){
  const tag=el.tagName.toLowerCase();
  const attrs=['data-test-id','data-ctl','data-click','data-hotkey','data-validation','data-required','data-template',
               'string_type','reserve_space','data-ui-meta','node_name','pyclassname','pyworkpage'];
  for(const a of attrs){
    if(el.hasAttribute(a)) return `//*[@${a}="${el.getAttribute(a)}"]`;
  }
  if(el.getAttribute('role')==='button') return `//${tag}[@role="button"]`;
  return genBasicXPath(el);
}

function genPegaSmartXPath(el){
  const tag=el.tagName.toLowerCase();
  const a=getSmartAnchorText(el);
  if(!a) return '';
  const A=a.replace(/"/g,'\\"');

  const attrs=['data-test-id','data-ctl','data-click','data-hotkey','data-validation','data-required','data-template',
               'string_type','reserve_space','data-ui-meta','node_name','pyclassname','pyworkpage'];
  for(const attr of attrs){
    if(el.hasAttribute(attr)){
      return `//*[normalize-space()="${A}"]//following::*[@${attr}="${el.getAttribute(attr)}"][1]`;
    }
  }

  if(el.getAttribute('role')==='button'){
    return `//*[normalize-space()="${A}"]//following::${tag}[@role="button"][1]`;
  }
  return '';
}

//extralloca
CURRENT_LOCATORS = elements.map((el, idx)=>{
  const label = bestLabelFor(el) || textScore(el) || `elem${idx+1}`;
  return {
    id: `E${idx+1}`,
    tag: el.tagName.toLowerCase(),
    text: label,
    framework: isPegaElement(el) ? 'Pega+' : (isSalesforceElement(el) ? 'Salesforce+' : ''),
    xpaths: {
      basic: genBasicXPath(el),
      wildcards: genWildcardXPath(el),
      axes: genAxesXPath(el),
      functions: genFunctionXPath(el),
      sf: isSalesforceElement(el) ? genSalesforceXPath(el) : (isPegaElement(el) ? genPegaXPath(el) : ''),
      sfsmart: isSalesforceElement(el) ? genSalesforceSmartXPath(el) : (isPegaElement(el) ? genPegaSmartXPath(el) : '')
    },
    css: genCSS(el),
    playwright: genPlaywright(el)   // ðŸ‘ˆ add this
  };
});

//filolis

function fillLocatorList(panel='basic'){
  locList.innerHTML = '';
  if(!CURRENT_LOCATORS.length) return;

  CURRENT_LOCATORS.forEach(loc=>{
    let value = loc.xpaths[panel] || loc.xpaths.basic;
    if(panel === 'sf' && loc.xpaths.sfsmart) value = loc.xpaths.sfsmart || loc.xpaths.sf;

    const row = document.createElement('div');
    row.className = 'loc-row';
    row.innerHTML = `
      <div style="display:flex;align-items:center;gap:8px;min-width:0;flex:1">
        <span class="badge">${loc.framework||'Generic'}</span>
        <span style="white-space:nowrap;overflow:hidden;text-overflow:ellipsis;max-width:40ch">${loc.text}</span>
      </div>
      <div class="small mono" style="white-space:nowrap;overflow:hidden;text-overflow:ellipsis;max-width:58ch" title="${value}">${value}</div>
    `;
    row.addEventListener('click', async ()=>{
      try{ await navigator.clipboard.writeText(value); }catch(e){}
      showToast('Locator copied');
      tryHighlightInPreviewByXPathOrCss({ xpath: value, css: loc.css });
    });
    locList.appendChild(row);
  });
}

// plw

function genPlaywright(el){
  const tag = el.tagName.toLowerCase();
  const cls = el.className || '';
  const label = bestLabelFor(el);

  /* ---------- Salesforce strategies ---------- */
  if(el.hasAttribute('data-qa-locator')){
    return `page.locator('[data-qa-locator="${el.getAttribute('data-qa-locator')}"]')`;
  }
  if(el.hasAttribute('data-aura-class')){
    return `page.locator('[data-aura-class="${el.getAttribute('data-aura-class')}"]')`;
  }
  if(el.hasAttribute('data-aura-rendered-by')){
    return `page.locator('[data-aura-rendered-by="${el.getAttribute('data-aura-rendered-by')}"]')`;
  }
  if(el.hasAttribute('data-key')){
    return `page.locator('[data-key="${el.getAttribute('data-key')}"]')`;
  }
  if(el.hasAttribute('data-id')){
    return `page.locator('[data-id="${el.getAttribute('data-id')}"]')`;
  }
  if(tag.startsWith('lightning-') || tag.startsWith('force-')){
    return `page.locator('${tag}')`;
  }
  if(cls.includes('slds-')){
    return `page.locator('[class*="slds-"]')`;
  }

  /* ---------- Pega strategies ---------- */
  const pegaAttrs = [
    'data-test-id','data-ctl','data-click','data-hotkey','data-validation',
    'data-required','data-template','string_type','reserve_space','data-ui-meta',
    'node_name','pyclassname','pyworkpage'
  ];
  for(const a of pegaAttrs){
    if(el.hasAttribute(a)){
      return `page.locator('[${a}="${el.getAttribute(a)}"]')`;
    }
  }

  /* ---------- Generic roleable ---------- */
  if(tag==='a' && label) return `page.getByRole('link', { name: '${label}' })`;
  if(tag==='button' && label) return `page.getByRole('button', { name: '${label}' })`;
  if((tag==='input'||tag==='textarea'||tag==='select') && label){
    return `page.getByLabel('${label}')`;
  }

  /* ---------- Fallbacks ---------- */
  if(el.id) return `page.locator('#${el.id}')`;
  if(el.name) return `page.locator('${tag}[name="${el.name}"]')`;
  return `page.locator('${tag}')`;
}


//

// === PATCH: fillLocatorList (GLOBAL) ===
function fillLocatorList(panel = 'basic'){
  // UI target list
  const listEl = (typeof locList !== 'undefined') ? locList : document.querySelector('#locList');
  if(!listEl) return;

  listEl.innerHTML = '';
  if(!Array.isArray(CURRENT_LOCATORS) || !CURRENT_LOCATORS.length) return;

  CURRENT_LOCATORS.forEach(loc => {
    // Choose the value to show for the current panel
    let value = (loc.xpaths && loc.xpaths[panel]) || (loc.xpaths ? loc.xpaths.basic : '');

    // Prefer smart variants when applicable
    if (panel === 'sf' && loc.xpaths && loc.xpaths.sfsmart) value = loc.xpaths.sfsmart || loc.xpaths.sf;
    if (panel === 'pega' && loc.xpaths && loc.xpaths.pegasmart) value = loc.xpaths.pegasmart || loc.xpaths.pega;

    // Build the row
    const row = document.createElement('div');
    row.className = 'loc-row';
    row.style.cssText = 'background:#fff;border:1px solid #e6ecf5;border-radius:8px;padding:8px 10px;color:#0f172a;cursor:pointer;display:flex;align-items:center;justify-content:space-between;gap:8px';

    const badge = document.createElement('span');
    badge.className = 'badge';
    badge.textContent = (loc.framework || '').trim() || 'Generic';
    badge.style.cssText = 'font-size:11px;background:#eef2ff;border:1px solid #d8e1ff;border-radius:999px;padding:2px 8px;margin-right:8px;color:#1f2b46';

    const left = document.createElement('div');
    left.style.cssText = 'display:flex;align-items:center;gap:8px;min-width:0;flex:1';
    const title = document.createElement('div');
    title.textContent = loc.text || '(no text)';
    title.style.cssText = 'white-space:nowrap;overflow:hidden;text-overflow:ellipsis;max-width:40ch';

    const right = document.createElement('div');
    right.textContent = value || '';
    right.title = value || '';
    right.className = 'small mono';
    right.style.cssText = 'white-space:nowrap;overflow:hidden;text-overflow:ellipsis;max-width:60ch;font-family:ui-monospace,Menlo,Consolas,monospace';

    left.prepend(badge);
    left.appendChild(title);
    row.appendChild(left);
    row.appendChild(right);

    row.addEventListener('click', async () => {
      try { await navigator.clipboard.writeText(value || ''); } catch {}
      if (typeof showToast === 'function') showToast('Locator copied');

      // highlight in preview (XPath first, CSS fallback)
      tryHighlightInPreviewByXPathOrCss({
        xpath: value,
        css: loc.css
      });
    });

    listEl.appendChild(row);
  });
}
// expose globally so other code can call it
window.fillLocatorList = fillLocatorList;

//
function highlightElementInIframe(el){
  if(!el) return;
  const old = el.style.outline;
  el.scrollIntoView({behavior:'smooth', block:'center', inline:'center'});
  el.style.outline = '2px solid #7c5cff';
  setTimeout(()=>{ el.style.outline = old; }, 900);
}
function findByXPathInIframe(xpath){
  try{
    const doc = (preview && (preview.contentDocument || preview.contentWindow.document)) || document;
    const res = doc.evaluate(xpath, doc, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
    const node = res.singleNodeValue;
    return (node && node.nodeType === 1) ? node : null;
  }catch(e){ return null; }
}
function tryHighlightInPreviewByXPathOrCss({xpath, css}){
  const doc = (preview && (preview.contentDocument || preview.contentWindow.document)) || document;
  // try XPath first
  if (xpath && /^(\(?\/\/|\.\/\/|\/\/|\(\s*\/\/)/.test(xpath)) {
    const el = findByXPathInIframe(xpath);
    if(el){ highlightElementInIframe(el); return; }
  }
  // fallback to CSS
  if (css){
    try{
      const el = doc.querySelector(css);
      if(el){ highlightElementInIframe(el); }
    }catch(e){}
  }
}

public void waitForSpinnerToDisappear() {
    // Two possible spinner locators
    By spinner1 = By.xpath("//lightning-spinner"); // your XPath
    By spinner2 = By.xpath("//span[@class='slds-assistive-text' and text()='Loading']"); // my XPath

    Wait<WebDriver> wait = new FluentWait<>(driver)
            .withTimeout(Duration.ofSeconds(30))
            .pollingEvery(Duration.ofSeconds(2))
            .ignoring(NoSuchElementException.class)
            .ignoring(StaleElementReferenceException.class);

    wait.until(webDriver -> {
        // Case 1: Spinner1 gone or invisible
        boolean spinner1Gone = driver.findElements(spinner1).isEmpty() ||
                ExpectedConditions.invisibilityOfElementLocated(spinner1).apply(driver);

        // Case 2: Spinner2 gone or invisible
        boolean spinner2Gone = driver.findElements(spinner2).isEmpty() ||
                ExpectedConditions.invisibilityOfElementLocated(spinner2).apply(driver);

        // Both should be gone
        return spinner1Gone && spinner2Gone;
    });

    System.out.println("âœ… Spinner completely disappeared");
}









