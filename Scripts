function extractAllLocators(){
  if(!CURRENT_DOC){ 
    CURRENT_LOCATORS = [];
    return; 
  }

  const doc = CURRENT_DOC;
  const els = Array.from(doc.querySelectorAll(
    'input, button, a, select, textarea, [role="button"]'
  ));

  CURRENT_LOCATORS = els.map((el,i)=>{
    const tag  = el.tagName.toLowerCase();
    const id   = el.id || '';
    const name = el.getAttribute('name') || '';
    const type = el.getAttribute('type') || '';
    const role = el.getAttribute('role') || '';
    const label = (el.getAttribute('aria-label') || el.getAttribute('placeholder') || el.textContent || '').trim() || `elem${i+1}`;

    let xp = `//${tag}`; // fallback

    // ===== Enhanced XPath with operators =====
    if(id){
      // Exact match OR contains (covers dynamic IDs)
      xp = `//*[@id="${id}" or contains(@id,"${id}")]`;
    } 
    else if(name){
      // Exact match OR starts-with (covers partial names)
      const shortName = name.length > 3 ? name.slice(0,3) : name;
      xp = `//${tag}[@name="${name}" or starts-with(@name,"${shortName}")]`;
    } 
    else if(label){
      // Match text OR aria-label
      if(el.hasAttribute('aria-label')){
        const aria = el.getAttribute('aria-label');
        xp = `//${tag}[contains(normalize-space(.),"${label}") or contains(@aria-label,"${aria}")]`;
      } else {
        xp = `//${tag}[contains(normalize-space(.),"${label}")]`;
      }
    }

    return { tag, id, name, type, role, label, xpath: xp };
  });
}




// Add detection 
function isPegaElement(el){
  return el.hasAttribute('data-test-id') || el.hasAttribute('data-ctl') || el.hasAttribute('data-click') ||
         el.hasAttribute('data-hotkey') || el.hasAttribute('data-validation') || el.hasAttribute('data-required') ||
         el.hasAttribute('data-template') || el.hasAttribute('string_type') || el.hasAttribute('reserve_space') ||
         el.hasAttribute('data-ui-meta') || el.hasAttribute('node_name') || el.hasAttribute('pyclassname') ||
         el.hasAttribute('pyworkpage');
}

function isSalesforceElement(el){
  const tag = el.tagName.toLowerCase();
  const cls = el.className||'';
  return el.hasAttribute('data-aura-class') || el.hasAttribute('data-aura-rendered-by') ||
         el.hasAttribute('data-key') || el.hasAttribute('data-id') || el.hasAttribute('data-qa-locator') ||
         tag.startsWith('lightning-') || tag.startsWith('force-') || cls.includes('slds-');
}



//Replace Sf gens
function genSalesforceXPath(el){
  const tag = el.tagName.toLowerCase();

  if(el.hasAttribute('data-qa-locator')) return `//*[@data-qa-locator="${el.getAttribute('data-qa-locator')}"]`;
  if(el.hasAttribute('data-aura-class')) return `//*[@data-aura-class="${el.getAttribute('data-aura-class')}"]`;
  if(el.hasAttribute('data-aura-rendered-by')) return `//*[@data-aura-rendered-by="${el.getAttribute('data-aura-rendered-by')}"]`;
  if(el.hasAttribute('data-key')) return `//*[@data-key="${el.getAttribute('data-key')}"]`;
  if(el.hasAttribute('data-id')) return `//*[@data-id="${el.getAttribute('data-id')}"]`;

  if(tag.startsWith('lightning-')) return `//${tag}`;
  if(tag.startsWith('force-')) return `//${tag}`;
  if((el.className||'').includes('slds-')) return `//*[contains(@class,"slds-")]`;

  return genBasicXPath(el);
}

function genSalesforceSmartXPath(el){
  const tag = el.tagName.toLowerCase();
  const a = getSmartAnchorText(el);
  if(!a) return '';
  const A = a.replace(/"/g,'\\"');

  if(el.hasAttribute('data-qa-locator')) return `//*[normalize-space()="${A}"]//following::*[@data-qa-locator="${el.getAttribute('data-qa-locator')}"][1]`;
  if(el.hasAttribute('data-aura-class')) return `//*[normalize-space()="${A}"]//following::*[@data-aura-class="${el.getAttribute('data-aura-class')}"][1]`;
  if(el.hasAttribute('data-aura-rendered-by')) return `//*[normalize-space()="${A}"]//following::*[@data-aura-rendered-by="${el.getAttribute('data-aura-rendered-by')}"][1]`;
  if(el.hasAttribute('data-key')) return `//*[normalize-space()="${A}"]//following::*[@data-key="${el.getAttribute('data-key')}"][1]`;
  if(el.hasAttribute('data-id')) return `//*[normalize-space()="${A}"]//following::*[@data-id="${el.getAttribute('data-id')}"][1]`;

  if(tag.startsWith('lightning-') || tag.startsWith('force-')) return `//*[normalize-space()="${A}"]//following::${tag}[1]`;
  if((el.className||'').includes('slds-')) return `//*[normalize-space()="${A}"]//following::*[contains(@class,"slds-")][1]`;

  return '';
}

//Replace pegjen
function genPegaXPath(el){
  const tag=el.tagName.toLowerCase();
  const attrs=['data-test-id','data-ctl','data-click','data-hotkey','data-validation','data-required','data-template',
               'string_type','reserve_space','data-ui-meta','node_name','pyclassname','pyworkpage'];
  for(const a of attrs){
    if(el.hasAttribute(a)) return `//*[@${a}="${el.getAttribute(a)}"]`;
  }
  if(el.getAttribute('role')==='button') return `//${tag}[@role="button"]`;
  return genBasicXPath(el);
}

function genPegaSmartXPath(el){
  const tag=el.tagName.toLowerCase();
  const a=getSmartAnchorText(el);
  if(!a) return '';
  const A=a.replace(/"/g,'\\"');

  const attrs=['data-test-id','data-ctl','data-click','data-hotkey','data-validation','data-required','data-template',
               'string_type','reserve_space','data-ui-meta','node_name','pyclassname','pyworkpage'];
  for(const attr of attrs){
    if(el.hasAttribute(attr)){
      return `//*[normalize-space()="${A}"]//following::*[@${attr}="${el.getAttribute(attr)}"][1]`;
    }
  }

  if(el.getAttribute('role')==='button'){
    return `//*[normalize-space()="${A}"]//following::${tag}[@role="button"][1]`;
  }
  return '';
}

//extralloca
CURRENT_LOCATORS = elements.map((el, idx)=>{
  const label = bestLabelFor(el) || textScore(el) || `elem${idx+1}`;
  return {
    id: `E${idx+1}`,
    tag: el.tagName.toLowerCase(),
    text: label,
    framework: isPegaElement(el) ? 'Pega+' : (isSalesforceElement(el) ? 'Salesforce+' : ''),
    xpaths: {
      basic: genBasicXPath(el),
      wildcards: genWildcardXPath(el),
      axes: genAxesXPath(el),
      functions: genFunctionXPath(el),
      sf: isSalesforceElement(el) ? genSalesforceXPath(el) : (isPegaElement(el) ? genPegaXPath(el) : ''),
      sfsmart: isSalesforceElement(el) ? genSalesforceSmartXPath(el) : (isPegaElement(el) ? genPegaSmartXPath(el) : '')
    },
    css: genCSS(el),
    playwright: genPlaywright(el)   // ðŸ‘ˆ add this
  };
});

//filolis

function fillLocatorList(panel='basic'){
  locList.innerHTML = '';
  if(!CURRENT_LOCATORS.length) return;

  CURRENT_LOCATORS.forEach(loc=>{
    let value = loc.xpaths[panel] || loc.xpaths.basic;
    if(panel === 'sf' && loc.xpaths.sfsmart) value = loc.xpaths.sfsmart || loc.xpaths.sf;

    const row = document.createElement('div');
    row.className = 'loc-row';
    row.innerHTML = `
      <div style="display:flex;align-items:center;gap:8px;min-width:0;flex:1">
        <span class="badge">${loc.framework||'Generic'}</span>
        <span style="white-space:nowrap;overflow:hidden;text-overflow:ellipsis;max-width:40ch">${loc.text}</span>
      </div>
      <div class="small mono" style="white-space:nowrap;overflow:hidden;text-overflow:ellipsis;max-width:58ch" title="${value}">${value}</div>
    `;
    row.addEventListener('click', async ()=>{
      try{ await navigator.clipboard.writeText(value); }catch(e){}
      showToast('Locator copied');
      tryHighlightInPreviewByXPathOrCss({ xpath: value, css: loc.css });
    });
    locList.appendChild(row);
  });
}

// plw

function genPlaywright(el){
  const tag = el.tagName.toLowerCase();
  const cls = el.className || '';
  const label = bestLabelFor(el);

  /* ---------- Salesforce strategies ---------- */
  if(el.hasAttribute('data-qa-locator')){
    return `page.locator('[data-qa-locator="${el.getAttribute('data-qa-locator')}"]')`;
  }
  if(el.hasAttribute('data-aura-class')){
    return `page.locator('[data-aura-class="${el.getAttribute('data-aura-class')}"]')`;
  }
  if(el.hasAttribute('data-aura-rendered-by')){
    return `page.locator('[data-aura-rendered-by="${el.getAttribute('data-aura-rendered-by')}"]')`;
  }
  if(el.hasAttribute('data-key')){
    return `page.locator('[data-key="${el.getAttribute('data-key')}"]')`;
  }
  if(el.hasAttribute('data-id')){
    return `page.locator('[data-id="${el.getAttribute('data-id')}"]')`;
  }
  if(tag.startsWith('lightning-') || tag.startsWith('force-')){
    return `page.locator('${tag}')`;
  }
  if(cls.includes('slds-')){
    return `page.locator('[class*="slds-"]')`;
  }

  /* ---------- Pega strategies ---------- */
  const pegaAttrs = [
    'data-test-id','data-ctl','data-click','data-hotkey','data-validation',
    'data-required','data-template','string_type','reserve_space','data-ui-meta',
    'node_name','pyclassname','pyworkpage'
  ];
  for(const a of pegaAttrs){
    if(el.hasAttribute(a)){
      return `page.locator('[${a}="${el.getAttribute(a)}"]')`;
    }
  }

  /* ---------- Generic roleable ---------- */
  if(tag==='a' && label) return `page.getByRole('link', { name: '${label}' })`;
  if(tag==='button' && label) return `page.getByRole('button', { name: '${label}' })`;
  if((tag==='input'||tag==='textarea'||tag==='select') && label){
    return `page.getByLabel('${label}')`;
  }

  /* ---------- Fallbacks ---------- */
  if(el.id) return `page.locator('#${el.id}')`;
  if(el.name) return `page.locator('${tag}[name="${el.name}"]')`;
  return `page.locator('${tag}')`;
}


//

// === PATCH: fillLocatorList (GLOBAL) ===
function fillLocatorList(panel = 'basic'){
  // UI target list
  const listEl = (typeof locList !== 'undefined') ? locList : document.querySelector('#locList');
  if(!listEl) return;

  listEl.innerHTML = '';
  if(!Array.isArray(CURRENT_LOCATORS) || !CURRENT_LOCATORS.length) return;

  CURRENT_LOCATORS.forEach(loc => {
    // Choose the value to show for the current panel
    let value = (loc.xpaths && loc.xpaths[panel]) || (loc.xpaths ? loc.xpaths.basic : '');

    // Prefer smart variants when applicable
    if (panel === 'sf' && loc.xpaths && loc.xpaths.sfsmart) value = loc.xpaths.sfsmart || loc.xpaths.sf;
    if (panel === 'pega' && loc.xpaths && loc.xpaths.pegasmart) value = loc.xpaths.pegasmart || loc.xpaths.pega;

    // Build the row
    const row = document.createElement('div');
    row.className = 'loc-row';
    row.style.cssText = 'background:#fff;border:1px solid #e6ecf5;border-radius:8px;padding:8px 10px;color:#0f172a;cursor:pointer;display:flex;align-items:center;justify-content:space-between;gap:8px';

    const badge = document.createElement('span');
    badge.className = 'badge';
    badge.textContent = (loc.framework || '').trim() || 'Generic';
    badge.style.cssText = 'font-size:11px;background:#eef2ff;border:1px solid #d8e1ff;border-radius:999px;padding:2px 8px;margin-right:8px;color:#1f2b46';

    const left = document.createElement('div');
    left.style.cssText = 'display:flex;align-items:center;gap:8px;min-width:0;flex:1';
    const title = document.createElement('div');
    title.textContent = loc.text || '(no text)';
    title.style.cssText = 'white-space:nowrap;overflow:hidden;text-overflow:ellipsis;max-width:40ch';

    const right = document.createElement('div');
    right.textContent = value || '';
    right.title = value || '';
    right.className = 'small mono';
    right.style.cssText = 'white-space:nowrap;overflow:hidden;text-overflow:ellipsis;max-width:60ch;font-family:ui-monospace,Menlo,Consolas,monospace';

    left.prepend(badge);
    left.appendChild(title);
    row.appendChild(left);
    row.appendChild(right);

    row.addEventListener('click', async () => {
      try { await navigator.clipboard.writeText(value || ''); } catch {}
      if (typeof showToast === 'function') showToast('Locator copied');

      // highlight in preview (XPath first, CSS fallback)
      tryHighlightInPreviewByXPathOrCss({
        xpath: value,
        css: loc.css
      });
    });

    listEl.appendChild(row);
  });
}
// expose globally so other code can call it
window.fillLocatorList = fillLocatorList;

//
function highlightElementInIframe(el){
  if(!el) return;
  const old = el.style.outline;
  el.scrollIntoView({behavior:'smooth', block:'center', inline:'center'});
  el.style.outline = '2px solid #7c5cff';
  setTimeout(()=>{ el.style.outline = old; }, 900);
}
function findByXPathInIframe(xpath){
  try{
    const doc = (preview && (preview.contentDocument || preview.contentWindow.document)) || document;
    const res = doc.evaluate(xpath, doc, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
    const node = res.singleNodeValue;
    return (node && node.nodeType === 1) ? node : null;
  }catch(e){ return null; }
}
function tryHighlightInPreviewByXPathOrCss({xpath, css}){
  const doc = (preview && (preview.contentDocument || preview.contentWindow.document)) || document;
  // try XPath first
  if (xpath && /^(\(?\/\/|\.\/\/|\/\/|\(\s*\/\/)/.test(xpath)) {
    const el = findByXPathInIframe(xpath);
    if(el){ highlightElementInIframe(el); return; }
  }
  // fallback to CSS
  if (css){
    try{
      const el = doc.querySelector(css);
      if(el){ highlightElementInIframe(el); }
    }catch(e){}
  }
}

public void waitForSpinnerToDisappear() {
    // Two possible spinner locators
    By spinner1 = By.xpath("//lightning-spinner"); // your XPath
    By spinner2 = By.xpath("//span[@class='slds-assistive-text' and text()='Loading']"); // my XPath

    Wait<WebDriver> wait = new FluentWait<>(driver)
            .withTimeout(Duration.ofSeconds(30))
            .pollingEvery(Duration.ofSeconds(2))
            .ignoring(NoSuchElementException.class)
            .ignoring(StaleElementReferenceException.class);

    wait.until(webDriver -> {
        // Case 1: Spinner1 gone or invisible
        boolean spinner1Gone = driver.findElements(spinner1).isEmpty() ||
                ExpectedConditions.invisibilityOfElementLocated(spinner1).apply(driver);

        // Case 2: Spinner2 gone or invisible
        boolean spinner2Gone = driver.findElements(spinner2).isEmpty() ||
                ExpectedConditions.invisibilityOfElementLocated(spinner2).apply(driver);

        // Both should be gone
        return spinner1Gone && spinner2Gone;
    });

    System.out.println("âœ… Spinner completely disappeared");
}









