<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>GenPOM — Selenium / Playwright POM Generator</title>
<style>
  :root{--bg:#0f1217;--panel:#151a21;--panel2:#171e27;--txt:#e9eef5;--dim:#9db0c5;--brd:#273243;--accent:#7c5cff}
  *{box-sizing:border-box}html,body{height:100%}body{margin:0;background:var(--bg);color:var(--txt);font-family:Inter,system-ui,Segoe UI,Roboto}
  .app{display:grid;grid-template-columns:290px 1fr;height:100%}
  .side{background:#0f1217;border-right:1px solid var(--brd);padding:18px 16px;overflow:auto}
  .brand{font-weight:800;margin:0 0 12px}
  .section{margin:16px 0 8px;color:var(--dim);font-size:12px;letter-spacing:.12em;text-transform:uppercase}
  .btn{width:100%;text-align:left;cursor:pointer;background:#151a21;border:1px solid var(--brd);border-radius:10px;padding:10px 12px;color:var(--txt);font-weight:600;margin-bottom:8px}
  .btn.primary{background:linear-gradient(180deg,var(--accent),#6047ff);border-color:#5b49f2}
  .switch{display:flex;gap:8px;flex-wrap:wrap}
  .sw{padding:8px 12px;border:1px solid var(--brd);border-radius:10px;background:#151a21;cursor:pointer;color:#cfe3ff}
  .sw.active{outline:2px solid rgba(124,92,255,.35)}
  .main{display:grid;grid-template-rows:auto 1fr}
  .toolbar{display:flex;gap:10px;align-items:center;padding:12px 16px;border-bottom:1px solid var(--brd);background:#151a21}
  .workspace{display:grid;grid-template-columns:50% 50%;gap:14px;padding:14px;overflow:auto}
  .card{background:#151a21;border:1px solid var(--brd);border-radius:14px;overflow:hidden;display:flex;flex-direction:column}
  .card .head{background:#171e27;padding:12px 14px;border-bottom:1px solid var(--brd);font-weight:700}
  .card .body{padding:12px;display:flex;flex-direction:column;gap:10px}
  textarea.ed{background:#fbfcfe;border:1px solid #dfe6ee;border-radius:12px;color:#0f172a;padding:10px;min-height:180px;font-family:ui-monospace,Menlo,Consolas,monospace}
  iframe#preview{width:100%;height:360px;background:#fff;border:none;border-radius:8px}
  .toast{position:fixed;bottom:16px;right:16px;background:#131a24;border:1px solid #2a3648;color:#cfe3ff;padding:10px 12px;border-radius:10px;opacity:0;transform:translateY(8px);transition:.15s}
  .toast.show{opacity:1;transform:translateY(0)}
  @media (max-width:980px){.workspace{grid-template-columns:1fr}}
</style>
</head>
<body>
<div class="app">
  <aside class="side">
    <h3 class="brand">GenPOM</h3>

    <div class="section">Workspace</div>
    <button id="btnPaste" class="btn">Paste HTML</button>
    <button id="btnOpenFile" class="btn">Open .html file</button>
    <button id="btnRender" class="btn primary">Render Preview</button>
    <button id="btnClear" class="btn">Clear</button>

    <div class="section">Framework</div>
    <div class="switch" id="fwSwitch">
      <div class="sw active" data-fw="selenium">Selenium</div>
      <div class="sw" data-fw="playwright">Playwright</div>
    </div>

    <div class="section">Language</div>
    <div class="switch" id="langSwitch">
      <div class="sw active" data-lang="java">Java</div>
      <div class="sw" data-lang="typescript">TypeScript</div>
      <div class="sw" data-lang="javascript">JavaScript</div>
      <div class="sw" data-lang="python">Python</div>
    </div>

    <div class="section">Actions</div>
    <button id="btnGenPOM" class="btn primary">Generate POM</button>
    <label for="xpathType">XPath Type:</label>
<select id="xpathType" style="margin:4px;padding:4px">
  <option value="basic">Basic</option>
  <option value="sfsmart">Salesforce Smart</option>
  <option value="sf">Salesforce</option>
  <option value="pegasmart">Pega Smart</option>
  <option value="pega">Pega</option>
</select>
    <button id="btnDownloadPOM" class="btn">Download POM</button>
    <button id="btnExport" class="btn">Export Locators (text)</button>
  </aside>

  <main class="main">
    <div class="toolbar">Paste → Render → Generate POM (Framework & Language respected)</div>
    <div class="workspace">
      <section class="card">
        <div class="head">HTML</div>
        <div class="body">
          <textarea id="pasteBox" class="ed" placeholder="Paste full page HTML here…"></textarea>
          <iframe id="preview" sandbox="allow-same-origin allow-forms allow-scripts"></iframe>
        </div>
      </section>
      <section class="card">
        <div class="head">Output</div>
        <div class="body">
          <textarea id="output" class="ed mono" placeholder="Generated code / export appears here…"></textarea>
        </div>
      </section>
    </div>
  </main>
</div>

<div id="toast" class="toast">Ready</div>
<input id="hiddenFile" type="file" accept=".html,.htm,.xhtml,.txt" hidden/>

<script>
/* ===== Shortcuts & State ===== */
const $ = s => document.querySelector(s);
const $$ = s => Array.from(document.querySelectorAll(s));
const preview = $('#preview'), pasteBox = $('#pasteBox'), out = $('#output'), toast = $('#toast'), hiddenFile = $('#hiddenFile');
let CURRENT_DOC = null, CURRENT_LOCATORS = [];

/* ===== UI Helpers ===== */
function showToast(msg){ toast.textContent = msg; toast.classList.add('show'); setTimeout(()=>toast.classList.remove('show'), 1200); }
function beautifyHTML(html){
  try{ return html.replace(/></g,'>\\n<').replace(/\\s+\\n/g,'\\n').replace(/\\n{2,}/g,'\\n'); }catch(e){ return html; }
}
function safeName(s, fallback='elem'){ return (s||fallback).replace(/\\W+/g,'_').replace(/^(\\d)/,'_$1'); }
function camel(s){ return safeName(s).replace(/_+(.)/g,(_,c)=>c.toUpperCase()); }

/* ===== Switches ===== */
function wireSwitch(container){
  const root = $(container);
  root.addEventListener('click', e=>{
    const sw = e.target.closest('.sw'); if(!sw) return;
    $$(container+' .sw').forEach(x=>x.classList.remove('active'));
    sw.classList.add('active');
    showToast((sw.dataset.fw || sw.dataset.lang) + ' selected');
  });
}
wireSwitch('#fwSwitch'); wireSwitch('#langSwitch');

/* ===== Render / Input ===== */
$('#btnRender').addEventListener('click', renderPreview);
$('#btnClear').addEventListener('click', ()=>{ pasteBox.value=''; preview.srcdoc=''; out.value=''; CURRENT_DOC=null; CURRENT_LOCATORS=[]; showToast('Cleared'); });
$('#btnPaste').addEventListener('click', async ()=>{
  try{ const txt = await navigator.clipboard.readText(); pasteBox.value = txt || ''; renderPreview(); }
  catch(e){ showToast('Clipboard blocked'); }
});
$('#btnOpenFile').addEventListener('click', ()=> hiddenFile.click());
hiddenFile.addEventListener('change', e=>{
  const f = e.target.files[0]; if(!f) return;
  const reader = new FileReader();
  reader.onload = ev => { pasteBox.value = ev.target.result || ''; renderPreview(); };
  reader.readAsText(f);
});

function renderPreview(){
  const html = beautifyHTML(pasteBox.value?.trim() || '<!doctype html><meta charset="utf-8"><body><h3>Paste HTML then Render</h3></body>');
  pasteBox.value = html;
  preview.srcdoc = html;
  CURRENT_DOC = new DOMParser().parseFromString(html, 'text/html');
  setTimeout(extractAllLocators, 20);
  showToast('Rendered');
}

/* ===== Locator extraction ===== */
function bestLabelFor(el, doc){
  const aria = el.getAttribute('aria-label'); if(aria) return aria.trim();
  const id = el.id;
  if(id){
    const lab = doc.querySelector(`label[for="${CSS.escape(id)}"]`);
    if(lab && lab.textContent.trim()) return lab.textContent.trim();
  }
  const ph = el.getAttribute('placeholder'); if(ph) return ph.trim();
  const txt = (el.textContent||'').trim(); if(txt) return txt;
  const name = el.getAttribute('name'); if(name) return name.trim();
  return '';
}

function extractAllLocators(){
  if(!CURRENT_DOC){ 
    CURRENT_LOCATORS = [];
    return; 
  }

  const doc = CURRENT_DOC;

  // Grab common interactive elements
  const els = Array.from(doc.querySelectorAll(
    'input, button, a, select, textarea, [role="button"]'
  ));

  CURRENT_LOCATORS = els.map((el,i)=>{
    const tag  = el.tagName.toLowerCase();
    const id   = el.id || '';
    const name = el.getAttribute('name') || '';
    const type = el.getAttribute('type') || '';
    const role = el.getAttribute('role') || '';
    const label = bestLabelFor(el, doc) || `elem${i+1}`;

    // Build a simple XPath
    let xp = `//${tag}`;
    if(id) xp = `//*[@id="${id}"]`;
    else if(name) xp = `//${tag}[@name="${name}"]`;
    else if(label) xp = `//${tag}[contains(normalize-space(.),"${label.replace(/"/g,'\\"')}")]`;

    // Build CSS selector
    const css = id ? `#${CSS.escape(id)}` 
                   : (name ? `${tag}[name="${name}"]` : tag);

    return { 
      tag, 
      id, 
      name, 
      type, 
      role, 
      label, 
      xpath: xp, 
      css 
    };
  });
}
  
function filteredLocators(){
  const sel = document.querySelector('#locType')?.value || 'all';

  return CURRENT_LOCATORS.filter(l=>{
    if(sel === 'all') return true;
    if(sel === 'id') return !!l.id;
    if(sel === 'name') return !!l.name;
    if(sel === 'button') return l.tag === 'button' || l.type === 'button' || l.role === 'button';
    if(sel === 'input') return l.tag === 'input' || l.tag === 'textarea' || l.tag === 'select';
    if(sel === 'checkbox') return l.tag === 'input' && l.type === 'checkbox';
    return true;
  });
}
/* Ensure locators exist (Generate works even if you forgot Render) */
async function ensureReady(){
  if(!CURRENT_DOC && pasteBox.value?.trim()){ renderPreview(); }
  if(!CURRENT_LOCATORS.length) extractAllLocators();
  for(let i=0;i<20;i++){ if(CURRENT_LOCATORS.length) return true; await new Promise(r=>setTimeout(r,25)); }
  return CURRENT_LOCATORS.length>0;
}

/* ===== Export (plain text list) ===== */
$('#btnExport').addEventListener('click', async ()=>{
  const ok = await ensureReady();
  if(!ok){ out.value='No locators. Paste HTML → Render first.'; showToast('No locators'); return; }
  let txt='// ===== Locator Export =====\\n';
  CURRENT_LOCATORS.forEach((l,i)=>{ txt += `\\n// ${i+1}. ${l.label}\\nXPath: ${l.xpath}\\nCSS  : ${l.css}\\n`; });
  out.value = txt;
  showToast('Export ready');
});

/* ===== Playwright locator helper (role/label first) ===== */
function pwLocatorFrom(l){
  const t = l.tag, lbl = l.label;
  if(t==='button' && lbl) return `page.getByRole("button", { name: "${lbl.replace(/"/g,'\\"')}" })`;
  if(t==='a'      && lbl) return `page.getByRole("link", { name: "${lbl.replace(/"/g,'\\"')}" })`;
  if((t==='input'||t==='textarea'||t==='select') && lbl) return `page.getByLabel("${lbl.replace(/"/g,'\\"')}")`;
  if(l.id) return `page.locator("#${l.id.replace(/"/g,'\\"')}")`;
  return `page.locator("${l.xpath.replace(/"/g,'\\"')}")`;
}

/* ===== Generators: Selenium ===== */
function genSeleniumJava(locs){
  let pom = `// ===== Selenium Page Object (Java) =====
import org.openqa.selenium.*;
public class SamplePage {
  private final WebDriver driver;
  public SamplePage(WebDriver driver){ this.driver = driver; }
`;
  locs.forEach(l=>{ pom += `  public WebElement get_${safeName(l.label)}(){ return driver.findElement(By.xpath("${l.xpath}")); }\\n`; });
  pom += `}\\n`; return pom;
}
function genSeleniumPython(locs){
  let pom = `# ===== Selenium Page Object (Python) =====
from selenium.webdriver.common.by import By

class SamplePage:
    def __init__(self, driver):
        self.driver = driver
`;
  locs.forEach(l=>{ pom += `    def get_${safeName(l.label)}(self):\\n        return self.driver.find_element(By.XPATH, "${l.xpath}")\\n\\n`; });
  return pom;
}
function genSeleniumJS(locs){
  let pom = `// ===== Selenium Page Object (JavaScript) =====
// npm i selenium-webdriver
class SamplePage {
  /** @param {import('selenium-webdriver').WebDriver} driver */
  constructor(driver){ this.driver = driver; }
`;
  locs.forEach(l=>{ pom += `  async get_${safeName(l.label)}(){ return this.driver.findElement({ xpath: "${l.xpath}" }); }\\n`; });
  pom += `}\\nmodule.exports = { SamplePage };\\n`; return pom;
}
function genSeleniumTS(locs){
  let pom = `// ===== Selenium Page Object (TypeScript) =====
import { WebDriver, WebElement } from 'selenium-webdriver';
export class SamplePage {
  constructor(private driver: WebDriver) {}
`;
  locs.forEach(l=>{ pom += `  async get_${safeName(l.label)}(): Promise<WebElement> { return this.driver.findElement({ xpath: "${l.xpath}" }); }\\n`; });
  pom += `}\\n`; return pom;
}

/* ===== Generators: Playwright ===== */
function genPlaywrightTS(locs){
  let pom = `// ===== Playwright Page Object (TypeScript) =====
import { Page, Locator } from '@playwright/test';
export class SamplePage {
  constructor(private readonly page: Page) {}
`;
  locs.forEach(l=>{ pom += `  get ${camel(l.label)}(): Locator { return ${pwLocatorFrom(l)}; }\\n`; });
  pom += `}\\n`; return pom;
}
function genPlaywrightJS(locs){
  let pom = `// ===== Playwright Page Object (JavaScript) =====
class SamplePage {
  /** @param {import('@playwright/test').Page} page */
  constructor(page){ this.page = page; }
`;
  locs.forEach(l=>{ pom += `  get ${camel(l.label)}(){ return ${pwLocatorFrom(l)}; }\\n`; });
  pom += `}\\nmodule.exports = { SamplePage };\\n`; return pom;
}
function genPlaywrightPy(locs){
  let pom = `# ===== Playwright Page Object (Python) =====
from playwright.sync_api import Page, Locator

class SamplePage:
    def __init__(self, page: Page):
        self.page = page
`;
  locs.forEach(l=>{
    const expr = pwLocatorFrom(l).replace(/^page\\./,'self.page.');
    pom += `    @property\\n    def ${camel(l.label)}(self) -> Locator:\\n        return ${expr}\\n\\n`;
  });
  return pom;
}
function genPlaywrightJava(locs){
  const sanitize = s => (s||'').replace(/'/g, '"');
  const fields   = locs.map((l,i)=>`  private Locator ${camel(l.label)||'elem'+(i+1)};`).join('\\n');
  const inits    = locs.map((l,i)=>`    ${camel(l.label)||'elem'+(i+1)} = ${sanitize(pwLocatorFrom(l))};`).join('\\n');

  let pom = `// ===== Playwright Page Object (Java) =====
import com.microsoft.playwright.*;

public class SamplePage {
  private final Page page;
${fields}

  public SamplePage(Page page){
    this.page = page;
${inits}
  }
}
`;
  return pom;
}

/* ===== Build dispatcher (framework + language) ===== */
function buildArtifacts(fw, lang, locs){
  if(fw === 'selenium'){
    if(lang==='java')       return genSeleniumJava(locs);
    if(lang==='python')     return genSeleniumPython(locs);
    if(lang==='javascript') return genSeleniumJS(locs);
    if(lang==='typescript') return genSeleniumTS(locs);
  } else { // playwright
    if(lang==='java')       return genPlaywrightJava(locs);
    if(lang==='python')     return genPlaywrightPy(locs);
    if(lang==='javascript') return genPlaywrightJS(locs);
    if(lang==='typescript') return genPlaywrightTS(locs);
  }
  return '// Unsupported selection';
}

/* ===== Generate POM ===== */
$('#btnGenPOM').addEventListener('click', async ()=>{
  const ok = await ensureReady();
  if(!ok){ out.value='No locators. Paste HTML → Render first.'; showToast('No locators'); return; }
  const fw   = $('#fwSwitch .sw.active')?.dataset.fw || 'selenium';
  const lang = $('#langSwitch .sw.active')?.dataset.lang || 'java';
  out.value = buildArtifacts(fw, lang, filteredLocators());
  showToast(`${fw} • ${lang} generated`);
});

/* ===== Download POM (proper extensions) ===== */
$('#btnDownloadPOM').addEventListener('click', ()=>{
  const code = out.value?.trim(); if(!code){ showToast('Nothing to download'); return; }
  const lang = $('#langSwitch .sw.active')?.dataset.lang || 'java';
  const ext  = lang==='java' ? 'java' : lang==='python' ? 'py' : lang==='typescript' ? 'ts' : 'js';
  download(`SamplePage.${ext}`, code);
  showToast('POM downloaded');
});

function download(filename, text){
  const blob = new Blob([text], {type:'text/plain'});
  const url  = URL.createObjectURL(blob);
  const a = document.createElement('a'); a.href = url; a.download = filename;
  document.body.appendChild(a); a.click();
  setTimeout(()=>{ URL.revokeObjectURL(url); a.remove(); }, 0);
}
</script>
</body>
</html>
